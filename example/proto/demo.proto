syntax = "proto3";

package proto;

import "github.com/infobloxopen/protoc-gen-preprocess/options/preprocess.proto";
import "google/api/annotations.proto";

option go_package = "github.com/infobloxopen/protoc-gen-preprocess/example/proto;proto";

message Demo {
    // Options specified at message level are applied for each field (in this case of type string)
    option (preprocess.each).string = {
        methods: [trim]
    };
    // Also it is possible to specify additional method on field level
    string preprocessedField = 1 [(preprocess.field).string.methods = lower];
    // Preprocessor automatically checks if field is repeated and generates methods accordingly
    repeated string preprocessedRepeatedField = 2;
    // If a field does not fit preprocess method, it is just ignored
    int32 ignored = 3 [(preprocess.field).string = {methods:[lower]}];

    message Internal {
        option (preprocess.each).string = {
            methods: [trim]
        };

        string internal_string = 1;
    };

    SubObject sub = 4;
    repeated SubObject sub_repeated = 5;

    Internal internal = 6;

    repeated Internal internal_repeated = 7;

    map <string, string> MyMap = 8;

    repeated string preprocessRepeatedField2 = 9 [(preprocess.field).string = {methods: [lower, trim, none]}];

    // must generate trim because none is an alias for no-op, no idea for what reason it was implemented
    // but must keep it for backward compatibility.
    repeated string nonepreprocessRepeated = 10 [(preprocess.field).string = {methods: [none]}];

    // clear must clear previous settings in inheritance chain and put only lower preprocessing.
    repeated string clearinheritance = 11 [(preprocess.field).string = {methods: [clear, lower]}];

}

message SubObject {
    // Options specified at message level are applied for each field (in this case of type string)
    option (preprocess.each).string = {
        methods: [trim]
    };

    string str_val = 1;
}

// This message left as is to show that we can provide our own preprocessors
message Custom {
    string doItYourself = 1;
}

service DemoService {
    rpc Echo(Demo) returns (Demo){
        option (google.api.http) = {
            post: "/echo"
            body: "*"
        };
    }
}

